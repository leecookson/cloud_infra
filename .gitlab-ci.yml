spec:
  inputs:
    ACTION:
      options: ["plan", "apply", "delete"]
      default: plan
    PLATFORM:
      options: ["aws", "azure", "gcp"]
      default: aws
    ALLPLANS:
      type: boolean
      default: false
---
stages:
  - plan
  - apply

variables:
  # AWS IAM Configuration
  AWS_DEFAULT_REGION: "us-east-1"
  AWS_S3_BACKEND_BUCKET: "cookson-pro-terraform-state"
  AWS_S3_BACKEND_ROLE: "arn:aws:iam::021874127869:role/s3_backend"
  AWS_DEPLOY_ROLE: "arn:aws:iam::021874127869:role/gitlab-oidc-provider-aws"
  AWS_CLI_INT_SESSION_DURATION: 3600

  # AZURE IAM Configuration
  AZURE_CLIENT_ID: "6daf4725-a18e-4c20-b909-fe0fae501b1c"
  AZURE_TENANT_ID: "4cb96fd7-6da3-4b09-90a6-c2719089be65"
  AZURE_SUBSCRIPTION_ID: "9db9c40a-cbe5-4efc-aacc-a9fa6414c592"

  # Google Cloud IAM Configuration
  GOOGLE_COMPUTE_REGION: "us-east4-c"
  GOOGLE_PROJECT_ID: "cookson-pro-gcp"

  GOOGLE_PROVIDER_AUDIENCE: "projects/101607275339/locations/global/workloadIdentityPools/gitlab-com/providers/gitlab-com-oidc"
  GOOGLE_PROJECT_NUMBER: "101607275339"
  OIDC_SERVICE_ACCOUNT_EMAIL: "gitlab-pipeline@cookson-pro-gcp.iam.gserviceaccount.com"
  OIDC_WIP_PROVIDER_ID: "gitlab-com-oidc"
  OIDC_WIP_ID: "gitlab-com"

  # GCP Configuration
  GCP_CLI_VERSION: "404.0.0"

default:
  image:
    name: $CI_REGISTRY/leecookson-images/triple-cloud-image/tf-deployer:latest
    entrypoint: [""]

.id_tokens:
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com

.backend_auth: &backend_auth
  - |
    terraform --version
    # assuming alpine image
    ls /etc/[argSd]*
    apk update
    apk add jq # needed by tf-scripts
    export AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION:-us-east-1}"

    mkdir -p ~/.aws
    echo "${GITLAB_OIDC_TOKEN}" > "${CI_PROJECT_DIR}/web_identity_token"
    aws configure set --profile s3-backend web_identity_token_file "${CI_PROJECT_DIR}/web_identity_token"
    aws configure set --profile s3-backend role_arn "${AWS_S3_BACKEND_ROLE}"
    aws configure set --profile s3-backend region "us-east-1"
    aws sts get-caller-identity --profile s3-backend

.aws_auth: &aws_auth
  - |
    # Setup AWS CLI for deployment
    mkdir -p ~/.aws
    echo "${GITLAB_OIDC_TOKEN}" > "${CI_PROJECT_DIR}/web_identity_token_aws"
    aws configure set --profile oidc-profile web_identity_token_file "${CI_PROJECT_DIR}/web_identity_token_aws"
    aws configure set --profile oidc-profile role_arn "${AWS_DEPLOY_ROLE}"
    aws configure set --profile oidc-profile region "us-east-1"
    aws sts get-caller-identity --profile oidc-profile

.azure-auth: &azure_auth
  - |
    az login --federated-token "${GITLAB_OIDC_TOKEN}" \
      --service-principal \
      --username "${AZURE_CLIENT_ID}" \
      --tenant "${AZURE_TENANT_ID}"
    az account show

# based on https://gitlab.com/guided-explorations/gcp/configure-openid-connect-in-gcp/-/blob/main/.gitlab-ci.yml?ref_type=heads
.gcp-auth: &gcp_auth
  - |
    set -x
    echo "Set up GCP OIDC connection"
    echo "${GITLAB_OIDC_TOKEN}" > "${CI_PROJECT_DIR}/web_identity_token_gcp"

    gcloud iam workload-identity-pools create-cred-config "${GOOGLE_PROVIDER_AUDIENCE}" \
      --service-account="${OIDC_SERVICE_ACCOUNT_EMAIL}" \
      --output-file="${CI_PROJECT_DIR}/.gcp_temp_cred.json" \
      --credential-source-file="${CI_PROJECT_DIR}/web_identity_token_gcp"
    gcloud auth login --cred-file="${CI_PROJECT_DIR}/.gcp_temp_cred.json"
    gcloud config set account "${OIDC_SERVICE_ACCOUNT_EMAIL}"

# GCP Jobs
gcp-tf-plan:
  stage: plan
  extends: .id_tokens
  before_script:
    - *backend_auth
    - *gcp_auth
  script:
    - |
      export GOOGLE_APPLICATION_CREDENTIALS="${CI_PROJECT_DIR}/.gcp_temp_cred.json"
      tfplan gcp
  rules:
    - if: ($CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push")
    - if: $ALLPLANS == "true" || ($ACTION == "plan" && $PLATFORM == "gcp")
      when: manual

gcp-tf-apply:
  stage: apply
  extends: .id_tokens
  before_script:
    - *backend_auth
    - *gcp_auth
  script:
    - |
      export GOOGLE_APPLICATION_CREDENTIALS="${CI_PROJECT_DIR}/.gcp_temp_cred.json"
      tfapply gcp
  rules:
    - if: $ACTION == "apply" && $PLATFORM == "gcp"
      when: manual

# AWS Jobs
aws-tf-plan:
  stage: plan
  extends: .id_tokens
  before_script:
    - *backend_auth
    - *aws_auth
  script:
    - tfplan aws
  rules:
    - if: ($CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push")
    - if: $ALLPLANS == "true" || ($ACTION == "plan" && $PLATFORM == "aws")
      when: manual

aws-tf-apply:
  stage: apply
  extends: .id_tokens
  before_script:
    - *backend_auth
    - *aws_auth
  script:
    - tfapply aws
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web") && $ACTION == "apply" && $PLATFORM == "aws"
      when: manual

# Azure Jobs
azure-tf-plan:
  stage: plan
  extends: .id_tokens
  before_script:
    - *backend_auth
    - *azure_auth
  script:
    - tfplan azure
  rules:
    - if: ($CI_COMMIT_BRANCH == "main" && $CI_PIPELINE_SOURCE == "push")
    - if: $ALLPLANS == "true" || ($ACTION == "plan" && $PLATFORM == "azure")
      when: manual

azure-tf-apply:
  stage: apply
  extends: .id_tokens
  before_script:
    - *backend_auth
    - *azure_auth
  script:
    - tfapply azure
  rules:
    - if: ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web") && $ACTION == "apply" && $PLATFORM == "azure"
      when: manual
