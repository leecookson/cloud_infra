spec:
  inputs:
    ACTION:
      type: string
      default: plan
    PLATFORM:
      type: string
      default: aws
    ALLPLANS:
      type: boolean
      default: false
---
stages:
  - auth
  - plan
  - apply

variables:
  # AWS IAM Configuration
  AWS_S3_BACKEND_ROLE: "arn:aws:iam::021874127869:role/s3_backend"
  AWS_DEPLOY_ROLE: "arn:aws:iam::021874127869:role/gitlab-oidc-provider-aws"
  AWS_CLI_INT_SESSION_DURATION: 3600
  # AZURE IAM Configuration
  AZURE_CLIENT_ID: "17115c0b-d002-462d-a621-c10e8a81a6c0"
  AZURE_TENANT_ID: "4cb96fd7-6da3-4b09-90a6-c2719089be65"
  # Google Cloud IAM Configuration
  GOOGLE_COMPUTE_REGION: "us-east1"
  GOOGLE_PROJECT_ID: "cookson-pro-gcp"
  GOOGLE_PROJECT_NUMBER: "101607275339"
  OIDC_SERVICE_ACCOUNT_EMAIL: "circleci-oidc-acct@cookson-pro-gcp.iam.gserviceaccount.com"
  OIDC_WIP_PROVIDER_ID: "circleci-oidc-prv"
  OIDC_WIP_ID: "circleci-oidc-pool"

  # GCP Configuration
  GCP_CLI_VERSION: "404.0.0"

include:
  - component: $CI_SERVER_FQDN/slacorte/devops/cicd/components/gcp-openid-connect/oidc@v1.0.0
    inputs:
      stage: auth
      gcp_pool_id: $OIDC_WIP_ID
      gcp_project_number: $GOOGLE_PROJECT_NUMBER
      gcp_provider_id: $OIDC_WIP_PROVIDER_ID
      gcp_service_account_email: $OIDC_SERVICE_ACCOUNT_EMAIL

cache:
  key: aws-profile
  paths:
    - ~/.aws

default:
  image:
    name: $CI_REGISTRY/leecookson-images/triple-cloud-image/tf-deployer:latest
    entrypoint: [""]

# S3 backend setup job
s3-backend:
  stage: auth
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com
  cache:
    key: aws-profile
    paths:
      - ~/.aws
  script:
    - |
      set -x
      export AWS_DEFAULT_REGION="${AWS_DEFAULT_REGION:-us-east-1}"
      echo ${AWS_CLI_INT_SESSION_DURATION}

      mkdir -p ~/.aws
      echo ${GITLAB_OIDC_TOKEN} > /tmp/web_identity_token
      aws configure set --profile s3-backend web_identity_token_file /tmp/web_identity_token
      aws configure set --profile s3-backend role_arn $AWS_S3_BACKEND_ROLE
      aws configure set --profile s3-backend region us-east-1
      cat ~/.aws/config
      aws sts get-caller-identity --profile s3-backend

aws-auth:
  stage: auth
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com
  cache:
    key: aws-profile
    paths:
      - ~/.aws
  script:
    - |
      # Setup AWS CLI for deployment

      mkdir -p ~/.aws
      echo ${GITLAB_OIDC_TOKEN} > /tmp/web_identity_token
      aws configure set --profile oidc-profile web_identity_token_file /tmp/web_identity_token
      aws configure set --profile oidc-profile role_arn $AWS_DEPLOY_ROLE
      aws configure set --profile oidc-profile region us-east-1
      cat ~/.aws/config
      aws sts get-caller-identity --profile oidc-profile

azure-auth:
  stage: auth
  id_tokens:
    GITLAB_OIDC_TOKEN:
      aud: https://gitlab.com
  script:
    - |
      az login --federated-token ${GITLAB_OIDC_TOKEN} \
        --service-principal \
        --username "$AZURE_CLIENT_ID" \
        --tenant "$AZURE_TENANT_ID"

# GCP Jobs
gcp-tf-plan:
  stage: plan
  needs: ["s3-backend", "gcloud:auth"]
  cache:
    key: aws-profile
    paths:
      - ~/.aws
  script:
    - cat /root/.aws/config
    - tfplan gcp
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
    - if: $ALLPLANS == "true"
    - if: $ACTION == "plan" && $PLATFORM == "gcp"

gcp-tf-apply:
  stage: apply
  cache:
    key: aws-profile
    paths:
      - ~/.aws
  needs: ["s3-backend", "gcloud:auth"]
  script:
    - tfapply gcp
  rules:
    - if: $ACTION == "apply" && $PLATFORM == "gcp"

# AWS Jobs
aws-tf-plan:
  stage: plan
  cache:
    key: aws-profile
    paths:
      - ~/.aws
  needs: ["s3-backend", "aws-auth"]
  script:
    - tfplan aws
  rules:
    - if: $ALLPLANS == "true"
    - if: $ACTION == "plan" && $PLATFORM == "aws"

aws-tf-apply:
  stage: apply
  cache:
    key: aws-profile
    paths:
      - ~/.aws
  needs: ["s3-backend", "aws-auth"]
  script:
    - tfapply aws
  rules:
    - if: $ACTION == "apply" && $PLATFORM == "aws"

# Azure Jobs
azure-tf-plan:
  stage: plan
  cache:
    key: aws-profile
    paths:
      - ~/.aws
  needs: ["s3-backend", "azure-auth"]
  script:
    - tfplan azure
  rules:
    - if: $ALLPLANS == "true"
    - if: $ACTION == "plan" && $PLATFORM == "azure"

azure-tf-apply:
  stage: apply
  cache:
    key: aws-profile
    paths:
      - ~/.aws
  needs: ["s3-backend", "azure-auth"]
  script:
    - tfapply azure
  rules:
    - if: $ACTION == "apply" && $PLATFORM == "azure"
