version: 2.1

orbs:
  gcp-cli: circleci/gcp-cli@3.3.1
  aws-cli: circleci/aws-cli@5.4.0
  azure-cli: circleci/azure-cli@1.3.2
  tf-scripts: leecookson/tf-scripts-orb@dev:first

parameters:
  action:
    type: enum
    enum: [plan, apply]
    default: plan
  platform:
    type: enum
    enum: [gcp, aws, azure]
    default: aws

jobs:
  gcp-init:
    executor: gcp-cli/default
    steps:
      - checkout
      - gcp-cli/setup:
          version: 404.0.0
          use_oidc: true
      - run:
          name: Deploy step (replace with your actual logic)
          command: |
            echo "Running deployment commands...."
            gcloud iam workload-identity-pools list --location=global
  aws-init:
    executor: aws-cli/default
    steps:
      - checkout
      # run the aws-cli/setup command from the orb
      - aws-cli/setup:
          profile_name: "oidc-profile"
          role_arn: "arn:aws:iam::021874127869:role/circle_ci_deploy"
          role_session_name: "oidc-session"
          session_duration: "1800"
      - run:
          name: Log-into-AWS
          command: |
            aws s3 ls --profile "oidc-profile"
  azure-init:
    executor: azure-cli/default
    steps:
      - checkout
      - run:
          name: Login to Azure using OIDC
          command: |
            circleci run oidc get --claims '{"aud": "api://AzureADTokenExchange"}'

            echo CIRCLE_OIDC_TOKEN
            echo ${CIRCLE_OIDC_TOKEN} | base64
            echo ${AZURE_TENANT_ID}
            echo ${AZURE_CLIENT_ID}
            az login --federated-token "$CIRCLE_OIDC_TOKEN" \
                    --service-principal \
                    --username "$AZURE_CLIENT_ID" \
                    --tenant "$AZURE_TENANT_ID"
      - run:
          command: az resource list
  gcp-tf-plan:
    executor: gcp-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile_name: "s3-backend"
          role_arn: "arn:aws:iam::021874127869:role/s3_backend"
          role_session_name: "s3-backend"
          session_duration: "1800"
      - gcp-cli/setup:
          version: 404.0.0
          use_oidc: true
      - tf-scripts/install
      - run:
          name: Terraform Plan
          command: tfplan gcp
  gcp-tf-apply:
    executor: gcp-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile_name: "s3-backend"
          role_arn: "arn:aws:iam::021874127869:role/s3_backend"
          role_session_name: "s3-backend"
          session_duration: "1800"
      - gcp-cli/setup:
          version: 404.0.0
          use_oidc: true
      - tf-scripts/install
      - run:
          name: Terraform Plan
          command: tfapply gcp
  aws-tf-plan:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile_name: "s3-backend"
          role_arn: "arn:aws:iam::021874127869:role/s3_backend"
          role_session_name: "s3-backend"
          session_duration: "1800"
      - aws-cli/setup:
          profile_name: "oidc-profile"
          role_arn: "arn:aws:iam::021874127869:role/circle_ci_deploy"
          role_session_name: "oidc-session"
          session_duration: "1800"
      - tf-scripts/install
      - run:
          name: Terraform Plan
          command: tfplan aws
  aws-tf-apply:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile_name: "s3-backend"
          role_arn: "arn:aws:iam::021874127869:role/s3_backend"
          role_session_name: "s3-backend"
          session_duration: "1800"
      - aws-cli/setup:
          profile_name: "oidc-profile"
          role_arn: "arn:aws:iam::021874127869:role/circle_ci_deploy"
          role_session_name: "oidc-session"
          session_duration: "1800"
      - tf-scripts/install
      - run:
          name: Terraform Plan
          command: tfapply aws
  azure-tf-plan:
    executor: azure-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile_name: "s3-backend"
          role_arn: "arn:aws:iam::021874127869:role/s3_backend"
          role_session_name: "s3-backend"
          session_duration: "1800"
      - azure-cli/install
      - run:
          name: Login to Azure using OIDC
          command: |
            az login --federated-token "$CIRCLE_OIDC_TOKEN" \
                    --service-principal \
                    --username "$AZURE_CLIENT_ID" \
                    --tenant "$AZURE_TENANT_ID"
      - tf-scripts/install
      - run:
          name: Terraform Plan
          command: tfplan azure
  azure-tf-apply:
    executor: azure-cli/default
    steps:
      - checkout
      - aws-cli/setup:
          profile_name: "s3-backend"
          role_arn: "arn:aws:iam::021874127869:role/s3_backend"
          role_session_name: "s3-backend"
          session_duration: "1800"
      - azure-cli/install
      - run:
          name: Login to Azure using OIDC
          command: |
            az login --federated-token "$CIRCLE_OIDC_TOKEN" \
                    --service-principal \
                    --username "$AZURE_CLIENT_ID" \
                    --tenant "$AZURE_TENANT_ID"
      - tf-scripts/install
      - run:
          name: Terraform Plan
          command: tfapply azure
# Orchestrate our job run sequence
workflows:
  azure-plan:
    when:
      and:
        - equal: [plan, << pipeline.parameters.action >>]
        - equal: [azure, << pipeline.parameters.platform >>]
    jobs:
      - azure-tf-plan
  gcp-plan:
    when:
      and:
        - equal: [plan, << pipeline.parameters.action >>]
        - equal: [gcp, << pipeline.parameters.platform >>]
    jobs:
      - gcp-tf-plan
  gcp-apply:
    when:
      and:
        - equal: [apply, << pipeline.parameters.action >>]
        - equal: [gcp, << pipeline.parameters.platform >>]
    jobs:
      - gcp-tf-apply
  aws-plan:
    when:
      and:
        - equal: [apply, << pipeline.parameters.action >>]
        - equal: [aws, << pipeline.parameters.platform >>]
    jobs:
      - aws-tf-plan
  aws-apply:
    when:
      and:
        - equal: [apply, << pipeline.parameters.action >>]
        - equal: [aws, << pipeline.parameters.platform >>]
    jobs:
      - aws-tf-apply
  azure-apply:
    when:
      and:
        - equal: [apply, << pipeline.parameters.action >>]
        - equal: [azure, << pipeline.parameters.platform >>]
    jobs:
      - azure-tf-apply
